name: Stage
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "staging" ]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX:PATH=${{github.workspace}}/project

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Install
        run: cmake --install

      - name: Store binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: ${{github.workspace}}/project
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        # Execute tests defined by the CMake configuration.
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest -C ${{env.BUILD_TYPE}}
#  build:
#    container:
#      image: danger89/cmake:latest
#    runs-on: docker
#    steps:
#      - name: Build
#        run:  mkdir /home/project && cmake -G Ninja -B /home/project/build
#      - name: Store binaries
#        uses: actions/upload-artifact@v4
#        with:
#          name: binaries
#          path: /home/project/build
  valgrind:
    name: Valgrind 3.19.0
    needs: build
    runs-on: docker
    container:
      image: jamalabo1/valgrind:latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
      - name: Valgrind Test
        run: valgrind --leak-check=full /home/project/build/